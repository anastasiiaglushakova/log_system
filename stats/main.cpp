#include <errno.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <unistd.h>

#include <algorithm>
#include <atomic>
#include <cctype>
#include <chrono>
#include <csignal>
#include <cstring>
#include <iostream>
#include <mutex>
#include <thread>
#include <unordered_map>
#include <vector>

#include "logger/LogEntry.h"

volatile std::sig_atomic_t stop_flag = 0;

void signal_handler(int) { stop_flag = 1; }

using namespace std;

// –í–µ–∫—Ç–æ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ª–æ–≥-–∑–∞–ø–∏—Å–µ–π
vector<LogEntry> entries;
// –ú—å—é—Ç–µ–∫—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
mutex m;

// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
int totalMessages = 0;  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
unordered_map<string, int>
  levelCount;  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É—Ä–æ–≤–Ω—è–º
size_t minLen = SIZE_MAX;  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
size_t maxLen = 0;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
size_t totalLen = 0;  // –°—É–º–º–∞—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

bool updated
  = false;  // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
void printStats() {
  lock_guard<mutex> lock(
    m);  // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–±—â–∏–º –¥–∞–Ω–Ω—ã–º

  cout << "\nüìä Statistics:\n";
  cout << "  Total messages: " << totalMessages << "\n";
  cout << "  By level:\n";
  for (auto &[lvl, count] : levelCount) {
    cout << "    " << lvl << ": " << count << "\n";
  }

  // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
  time_t now = time(nullptr);
  int countLastHour
    = count_if(entries.begin(), entries.end(),
               [now](const LogEntry &e) {
                 return now - e.timestamp <= 3600;
               });
  cout << "  Messages in last hour: " << countLastHour
       << "\n";

  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–ª–∏–Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  // –µ—Å—Ç—å
  if (totalMessages > 0) {
    cout << "  Lengths:\n";
    cout << "    Min: " << minLen << "\n";
    cout << "    Max: " << maxLen << "\n";
    cout << "    Avg: " << totalLen / totalMessages << "\n";
  }

  updated = false;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
}

// –§—É–Ω–∫—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// –∫–∞–∂–¥—ã–µ T —Å–µ–∫—É–Ω–¥
void statsTimer(int T) {
  while (true) {
    this_thread::sleep_for(chrono::seconds(T));
    if (updated)
      printStats();
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –µ–≥–æ
// —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
string determineLevel(const string &line) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ
  // –ø–æ–∏—Å–∫–∞
  string upperLine = line;
  transform(upperLine.begin(), upperLine.end(),
            upperLine.begin(), ::toupper);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏—Ö —É—Ä–æ–≤–µ–Ω—å
  // –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  if (upperLine.find("ERROR") != string::npos
      || upperLine.find("ERR") != string::npos
      || upperLine.find("FATAL") != string::npos)
    return "ERROR";
  else if (upperLine.find("WARNING") != string::npos
           || upperLine.find("WARN") != string::npos
           || upperLine.find("WRN") != string::npos)
    return "WARNING";
  else if (upperLine.find("INFO") != string::npos
           || upperLine.find("INFORMATION") != string::npos)
    return "INFO";
  else if (upperLine.find("DEBUG") != string::npos
           || upperLine.find("DBG") != string::npos
           || upperLine.find("TRACE") != string::npos)
    return "DEBUG";
  else
    return "unknown";  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
void processLogLine(const string &line) {
  if (line.empty())
    return;

  time_t now = time(nullptr);
  string level = determineLevel(line);

  // –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
  cout << "üìù [" << level << "] " << line << "\n";

  lock_guard<mutex> lock(
    m);  // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–±—â–∏–º –¥–∞–Ω–Ω—ã–º

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  entries.push_back({line, now, level});
  levelCount[level]++;

  totalMessages++;
  minLen = min(minLen, line.size());
  maxLen = max(maxLen, line.size());
  totalLen += line.size();

  updated = true;  // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
void handleClient(int clientSock, int N) {
  cout << "üîå New client connected (socket: " << clientSock
       << ")\n";

  char buffer[1024];
  string leftover;  // –ë—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    // –º–µ–∂–¥—É recv

  while (true) {
    memset(buffer, 0, sizeof(buffer));  // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä

    ssize_t bytes
      = recv(clientSock, buffer, sizeof(buffer) - 1, 0);

    cout << "DEBUG: recv returned " << bytes << " bytes\n";

    if (bytes < 0) {
      if (errno == EAGAIN || errno == EWOULDBLOCK) {
        // –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Å–æ–∫–µ—Ç: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ–π—á–∞—Å, –ø—Ä–æ–±—É–µ–º
        // —Å–Ω–æ–≤–∞
        continue;
      }
      cout << "ERROR: recv failed: " << strerror(errno)
           << "\n";
      break;
    }

    if (bytes == 0) {
      cout << "INFO: Client closed connection gracefully\n";
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (!leftover.empty()) {
        processLogLine(leftover);
        if (totalMessages % N == 0)
          printStats();
      }
      break;
    }

    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
    buffer[bytes] = '\0';
    leftover.append(buffer, bytes);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (—Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö '\n')
    size_t pos;
    while ((pos = leftover.find('\n')) != string::npos) {
      string line = leftover.substr(0, pos);
      leftover.erase(0, pos + 1);

      // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–∏–º–≤–æ–ª –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞—Ä–µ—Ç–∫–∏ '\r' –¥–ª—è
      // Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      if (!line.empty() && line.back() == '\r') {
        line.pop_back();
      }

      processLogLine(line);

      // –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
      if (totalMessages % N == 0)
        printStats();
    }
  }

  cout << "üîå Client disconnected (socket: " << clientSock
       << ")\n";
  close(clientSock);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
int main(int argc, char *argv[]) {
  if (argc < 4) {
    cerr << "Usage: " << argv[0] << " <port> <N> <T>\n";
    cerr << "  port: Port number to listen on\n";
    cerr << "  N: Print stats every N messages\n";
    cerr
      << "  T: Print stats every T seconds (if updated)\n";
    return 1;
  }

  // –°—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  int port = stoi(argv[1]);
  int N = stoi(argv[2]);
  int T = stoi(argv[3]);

  cout << "Starting log server with parameters:\n";
  cout << "  Port: " << port << "\n";
  cout << "  Stats every " << N << " messages\n";
  cout << "  Auto-stats every " << T << " seconds\n\n";

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞
  // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  thread timerThread(statsTimer, T);
  timerThread.detach();

  // –°–æ–∑–¥–∞—ë–º TCP —Å–æ–∫–µ—Ç
  int server_fd = socket(AF_INET, SOCK_STREAM, 0);
  if (server_fd == -1) {
    perror("socket");
    return 1;
  }

  // –ü–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
  // "Address already in use"
  int opt = 1;
  if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt,
                 sizeof(opt))
      < 0) {
    perror("setsockopt");
    close(server_fd);
    return 1;
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
  sockaddr_in address{};
  address.sin_family = AF_INET;
  address.sin_addr.s_addr
    = INADDR_ANY;  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º
  address.sin_port = htons(port);

  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –∫ –∞–¥—Ä–µ—Å—É
  if (bind(server_fd, (struct sockaddr *)&address,
           sizeof(address))
      < 0) {
    perror("bind");
    close(server_fd);
    return 1;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ
  // –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  std::signal(SIGINT, signal_handler);
  std::signal(SIGTERM, signal_handler);

  // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –æ—á–µ—Ä–µ–¥—å—é –¥–æ 10
  // —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  if (listen(server_fd, 10) < 0) {
    perror("listen");
    close(server_fd);
    return 1;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è accept
  struct timeval tv;
  tv.tv_sec = 1;
  tv.tv_usec = 0;
  if (setsockopt(server_fd, SOL_SOCKET, SO_RCVTIMEO,
                 (const char *)&tv, sizeof(tv))
      < 0) {
    perror("setsockopt SO_RCVTIMEO failed");
    close(server_fd);
    return 1;
  }

  cout << "üü¢ Log statistics server listening on port "
       << port << "...\n";

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–Ω—è—Ç–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  while (!stop_flag) {
    socklen_t addrlen = sizeof(address);
    int clientSock = accept(
      server_fd, (struct sockaddr *)&address, &addrlen);
    if (clientSock < 0) {
      if (errno == EAGAIN || errno == EWOULDBLOCK) {
        // –¢–∞–π–º–∞—É—Ç accept ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        continue;
      }
      if (stop_flag)
        break;  // –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–µ
      perror("accept");
      continue;
    }
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    thread clientThread(handleClient, clientSock, N);
    clientThread.detach();
  }

  // –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç
  close(server_fd);

  return 0;
}
